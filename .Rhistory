removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,] <- sapply(lambdas, function(l){
predicted_ratings <- test_final %>%
left_join(just_the_sum, by='movieId') %>%
mutate(b_i = s/(n_i+l)) %>%
mutate(pred = mu + b_i) %>%
pull(pred)
return(RMSE(predicted_ratings, test_final$rating))
})
}
rmses_cv <- colMeans(rmses)
png(filename="figs/penalties.png")
qplot(lambdas,rmses_cv)
lambda <- lambdas[which.min(rmses_cv)]
lambda <- lambdas[which.min(rmses_cv)]
lambda
min(rmses_cv)
#parameters
set.seed(2000)
k <- 5
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating, k=k)
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 5-fold cross validation to determine the optimal lambda
for(n in 1:5) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,] <- sapply(lambdas, function(l){
predicted_ratings <- test_final %>%
left_join(just_the_sum, by='movieId') %>%
mutate(b_i = s/(n_i+l)) %>%
mutate(pred = mu + b_i) %>%
pull(pred)
return(RMSE(predicted_ratings, test_final$rating))
})
}
#parameters
set.seed(2000)
k <- 10
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating, k=k)
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 5-fold cross validation to determine the optimal lambda
for(n in 1:5 ) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,] <- rmses <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
b_i <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, test_set$rating))
})
}
#parameters
set.seed(2000)
k <- 10
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating, k=k)
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 5-fold cross validation to determine the optimal lambda
for(n in 1:k ) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,] <- rmses <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
b_i <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, test_set$rating))
})
}
length(lambdas)
rmses
str(rmses)
rmses[n,]  <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
b_i <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, test_set$rating))
})
#parameters
set.seed(2000)
k <- 10
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating, k=k)
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 10-fold cross validation to determine the optimal lambda
for(n in 1:k ) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,]  <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
b_i <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, test_set$rating))
})
}
View(validation)
#parameters
set.seed(2000)
k <- 10
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating, k=k)
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 10-fold cross validation to determine the optimal lambda
for(n in 1:k ) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,]  <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
b_i <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, test_set$rating))
})
}
rmses_cv <- colMeans(rmses)
png(filename="figs/penalties.png")
qplot(lambdas,rmses_cv)
lambda <- lambdas[which.min(rmses_cv)]
rmses
head(edx)
View(test_final)
k <- 5
#parameters
set.seed(1500)
k <- 5
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating,k,returnTrain = TRUE)
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 10-fold cross validation to determine the optimal lambda
for(n in 1:k ) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,]  <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
b_i <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, test_set$rating))
})
}
print(n,l,rmse)
print(rmse)
#parameters
set.seed(1500)
k <- 5
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating,k,returnTrain = TRUE)
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 10-fold cross validation to determine the optimal lambda
for(n in 1:k ) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
#As Regularization Chapter
mu <- mean(train_final$rating)
just_the_sum <- train_final %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses[n,]  <- sapply(lambdas, function(l){
print(n,l)
mu <- mean(train_set$rating)
b_i <- train_set %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_set %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
rmse <- RMSE(predicted_ratings, test_set$rating)
print(rmse)
return(rmse)
})
}
#parameters
set.seed(1500)
k <- 5
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating,k,returnTrain = TRUE)
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 10-fold cross validation to determine the optimal lambda
for(n in 1:k) {
train_set <- edx[cv_splits[[n]],]
test_set <- edx[-cv_splits[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
mu <- mean(train_final$rating)
rmses[n,] <- sapply(lambdas_u, function(l){
print(l,n)
b_i <- train_final %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lambda_i))
b_u <- train_final %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_final %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
rmse <- RMSE(predicted_ratings, test_final$rating)
print(rmse)
return(rmse)
})
}
test_set <- edx[-cv[[n]],]
#parameters
set.seed(1500)
k <- 5
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating,k,returnTrain = TRUE)
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 10-fold cross validation to determine the optimal lambda
for(n in 1:k) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
mu <- mean(train_final$rating)
rmses[n,] <- sapply(lambdas_u, function(l){
print(l,n)
b_i <- train_final %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lambda_i))
b_u <- train_final %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_final %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
rmse <- RMSE(predicted_ratings, test_final$rating)
print(rmse)
return(rmse)
})
}
lambdas <- seq(0, 5, 0.1)
#parameters
set.seed(1500)
k <- 5
lambdas <- seq(0, 5, 0.1)
cv <- createFolds(edx$rating,k,returnTrain = TRUE)
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
# define a empty matrix, k * length(lambda)
rmses <- matrix(nrow=k,ncol=length(lambdas))
# perform 10-fold cross validation to determine the optimal lambda
for(n in 1:k) {
train_set <- edx[cv[[n]],]
test_set <- edx[-cv[[n]],]
# Make sure userId and movieId in test set are also in the train set
test_final <- test_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(test_set, test_final)
train_final <- rbind(train_set, removed)
mu <- mean(train_final$rating)
rmses[n,] <- sapply(lambdas, function(l){
print(l,n)
b_i <- train_final %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- train_final %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <-
test_final %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
rmse <- RMSE(predicted_ratings, test_final$rating)
print(rmse)
return(rmse)
})
}
rmses_cv <- colMeans(rmses)
png(filename="figs/penalties.png")
qplot(lambdas,rmses_cv)
lambda <- lambdas[which.min(rmses_cv)]
rmse_results <- bind_rows(rmse_results,
data_frame(Model="Regularized Movie + User Effect Model",
RMSE = model))
mu <- mean(edx$rating)
b_i_reg <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lambda))
b_u_reg <- edx %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lambda))
predicted_ratings <-
validation %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
model<- RMSE(predicted_ratings, validation$rating)   # 0.864818
rmse_results <- bind_rows(rmse_results,
data_frame(Model="Regularized Movie + User Effect Model",
RMSE = model))
model
b_u_reg <- edx %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lambda))
mu <- mean(edx$rating)
b_i_reg <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lambda))
b_u_reg <- edx %>%
left_join(b_i_reg, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lambda))
predicted_ratings <-
validation %>%
left_join(b_i_reg, by = "movieId") %>%
left_join(b_u_reg, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
model<- RMSE(predicted_ratings, validation$rating)   # 0.864818
model
